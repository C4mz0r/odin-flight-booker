continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
@num_passengers
params
continue
params
continue
params
continue
params
continue
params
byebug
continue
params
continue
params
continue
params
continue
Flight.second
Flight.first
params
continue
params
continue
DateTime.strptime(date, "%m/%d/%Y %H:%M:%S")
date = nil
DateTime.strptime(date, "%m/%d/%Y %H:%M:%S")
date
DateTime.parse(date, "%m/%d/%Y %H:%M:%S")
DateTime.parse(date)
date
continue
conmtinue
continue
Flight.searchForFlights(nil, nil, nil)
params[:from_code]
params
@results
continue
params
continue
params
continue
params
[].empty?
[].nil?
@results
continue
Flight.searchForFlights('YEG', 'MSP', DateTime.now-1)
@results
continue
Flight.where('date BETWEEN ? AND ?', DateTime.now.beginning_of_day-1, DateTime.now.end_of_day)
Flight.where('date BETWEEN ? AND ?', DateTime.now.beginning_of_day, DateTime.now.end_of_day)
Flight.all.first.date === Date.new(2016, 07, 13)
Flight.all.first.date
Flight.all.first.date === Date.new(2016, 07, 12)
Flight.all.first.date === Date.new(2016, 07, 14)
Flight.all.first.date === Date.new(2016, 07, 13)
Flight.all.first.date === 
Flight.all.first.date
Flights.first.date
Flight.all
@results
continue
@results
params
continue
params
continue
@flightDates
@flightDates.map! { |dt| dt.strftime("%m/%d/%Y %H:%M:%S") }
@flightDates
@flightDates.map { |dt| dt.strftime("%m/%d/%Y %H:%M:%S") }
@flightDates.map { |dt| dt.strftime("%m/%d/%Y %h:%M:%S") }
@flightDates.map { |dt| dt.strftime("%m/%d/%Y %HH:%M:%S") }
@flightDates.map { |dt| dt.strftime("%m/%d/%Y %H:%M:%S") }
@flightDates.map { |dt| dt.strftime("%m/%d/%Y") }
@flightDates
