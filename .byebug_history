continue
conitnue
params
@flight
@booking
continue
params
continue
params
continue
@flight
flight
params
continue
params
byebug
continue
params
continue
params
continue
@booking.passengers.build
@booking.passengers
@bookign
exit
@booking.passengers.build
@booking.passengers
@booking
exit
@booking.passengers.build
@booking.passengers
@booking
exit
Passenger
@booking.passengers.build
Booking
@booking.passengers.build
@booking
exit
continue
@booking
@booking.passengers
@booking.passengers.build
@booking
@num_passengers
continue
booking_params
Booking
exit
Booking
continue
Booking.new(booking_params).save
Booking.new(booking_params)
params
continue
params[:flight_id]
params
exit
params
continue
params
continue
params
continue
params
continue
params.require(:booking).permit(:flight)
continue
params
continue
booking_params
Booking
@booking
Passenger.all
Passengers.all
booking_params
continue
Passenger.first.flights
Passenger.first
Passenger.first.flight
passenger
Passenger.first.bookings
Booking.passengers
Booking.tickets.all
Flight.first.passengers
Flight.first
@flight
x.save
x = Booking.new(booking_params)
Booking.new(booking_params)
Booking.new
booking_params
continue
params
continue
conitnue
cpmtom
cpmtomie
params
[ara,
continue
params
continue
cpmtomie
continue
params
continue
params
continue
params
continue
params
continue
@booking.passengers
passenger_id
params
continue
params
continue
params
continue
params
continue
params
continue
@booking.passengers.second.asd
@booking.passengers.first.asdf
@booking.passengers.first
@booking.passengers.first.id
@booking.passengers.id
@booking.passengers
@booking.passengers.second
@booking.passengers.first
@booking.passengers
@booking
continue
@booking.passengers
@booking
@num_passengers
continue
@booking.passengers
@booking.passengers.each do puts "Hi" end
@booking.passengers.count
@booking.passengers
continue
@num_passengers
continue
c
continue
params
continue
@booking.passengers
@booking
@bookign
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
@num_passengers
params
continue
params
continue
params
continue
params
continue
params
byebug
continue
params
continue
params
continue
params
continue
Flight.second
Flight.first
params
continue
params
continue
DateTime.strptime(date, "%m/%d/%Y %H:%M:%S")
date = nil
DateTime.strptime(date, "%m/%d/%Y %H:%M:%S")
date
DateTime.parse(date, "%m/%d/%Y %H:%M:%S")
DateTime.parse(date)
date
continue
conmtinue
continue
Flight.searchForFlights(nil, nil, nil)
params[:from_code]
params
@results
continue
params
continue
params
continue
params
[].empty?
[].nil?
@results
continue
Flight.searchForFlights('YEG', 'MSP', DateTime.now-1)
@results
continue
Flight.where('date BETWEEN ? AND ?', DateTime.now.beginning_of_day-1, DateTime.now.end_of_day)
Flight.where('date BETWEEN ? AND ?', DateTime.now.beginning_of_day, DateTime.now.end_of_day)
Flight.all.first.date === Date.new(2016, 07, 13)
Flight.all.first.date
Flight.all.first.date === Date.new(2016, 07, 12)
Flight.all.first.date === Date.new(2016, 07, 14)
Flight.all.first.date === Date.new(2016, 07, 13)
Flight.all.first.date === 
Flight.all.first.date
Flights.first.date
Flight.all
@results
continue
@results
params
continue
params
continue
@flightDates
@flightDates.map! { |dt| dt.strftime("%m/%d/%Y %H:%M:%S") }
@flightDates
@flightDates.map { |dt| dt.strftime("%m/%d/%Y %H:%M:%S") }
@flightDates.map { |dt| dt.strftime("%m/%d/%Y %h:%M:%S") }
@flightDates.map { |dt| dt.strftime("%m/%d/%Y %HH:%M:%S") }
@flightDates.map { |dt| dt.strftime("%m/%d/%Y %H:%M:%S") }
